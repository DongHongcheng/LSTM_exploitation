import numpy as np
import random
from tqdm import tqdm
from keras.models import Sequential
from keras.layers.core import Dense, Activation, Dropout
from keras.layers.recurrent import LSTM
import time
import os

os.environ["CUDA_DEVICE_ORDER"] = "PCI_BUS_ID"
os.environ["CUDA_VISIBLE_DEVICES"] = "0, 1, 2, 3"  # 使用第二块GPU（从0开始）

start_time = time.strftime("%Y-%m-%d %H:%M:%S")
print('start time:', start_time)
P = 3
Q = 10


def br(ratio):
    if ratio < P / (P + Q):
        br1 = 0
    else:
        br1 = 1
    return br1


def weight_update(strategy, weight_now):
    weight_next = np.zeros(2)
    if strategy == 1:
        weight_next = weight_now + [1, 0]
    else:
        weight_next = weight_now + [0, 1]
    return weight_next

M = 50
N = 10 ** 3
weight = np.zeros((M, 2))
Learner_strategy = np.zeros((M, N + 2))
Adversary_strategy = np.zeros((M, N + 2))
a = np.zeros((M, 2))
b = np.zeros((M, 2))
for i in range(M):
    weight[i] = np.array([2 ** 0.5, 1])
    for j in range(N + 2):
        Learner_strategy[i, j] = br(weight[i, 0] / sum(weight[i]))
        Adversary_strategy[i, j] = random.randint(0, 1)
        weight[i] = weight_update(Adversary_strategy[i, j], weight[i])

for i in range(M):
    a[i] = np.array([[Learner_strategy[i, 0], Adversary_strategy[i, 0]]])
    b[i] = np.array([[Learner_strategy[i, 1], Adversary_strategy[i, 2]]])

for i in tqdm(range(1, N)):
    x_train = np.zeros((M, i, 1, 2))
    y_train = np.zeros((M, i, 1, 2))
    append_temp_1 = np.zeros((M, 2))
    append_temp_2 = np.zeros((M, 2))
    for j in range(M):
        x_train[j] = np.reshape(a[j], (i, 1, 2))
        y_train[j] = np.reshape(b[j], (i, 1, 2))
    model = Sequential()
    model.add(LSTM(5, input_shape=(1, 2), return_sequences=True))
    model.add(LSTM(5, return_sequences=False))
    model.add(Dropout(0.2))
    model.add(Dense(2))
    model.add(Activation('elu'))
    model.compile(loss="mse", optimizer="adam")
    for k in range(M):
        model.fit(x_train[k], y_train[k], epochs=50, batch_size=32)# 参数依次为特征，标签，训练循环次数，小批量（一次放入训练的数据个数）
        append_temp_1[k] = [Learner_strategy[k, i], Adversary_strategy[k, i]]
        append_temp_2[k] = [Learner_strategy[k, i + 1], Learner_strategy[k, i + 2]]
    a = np.column_stack((a, append_temp_1))
    b = np.column_stack((b, append_temp_2))
    model_name = 'my_model' + str(i) + '.h5'
    model.save('/home/dhc/model/' + model_name)


end_time = time.strftime("%Y-%m-%d %H:%M:%S")
print('end time', end_time)
